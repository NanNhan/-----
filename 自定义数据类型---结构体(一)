//描述一个学生类型
#include<stdio.h>
////声明一个结构体类型，是通过学生类型来创建学生变量(对象)
////描述学生:属性-名字，电话，性别，年龄
//struct stu
//{
//	char name[20];
//	char tele[12];
//	char sex[10];
//	int age;
//}s4,s5,s6;//也可以,s3,s4,s5,s6都是全局变量
//struct stu s3;//全局变量
//int main()
//{
//	//结构体变量的创建
//	struct stu s1;
//	struct stu s2;
//	return 0;
//}
////匿名结构体类型,struct后面没有结构体标签，只能利用变量列表创建变量x
//struct
//{
//	int a;
//	char b;
//	float c;
//}x;

//struct
//{
//	int a;
//	char c;
//}x;
//
//struct
//{
//	int a;
//	char c;
//}* pas;//匿名结构体指针类型，不可以用来存x的地址，因为这是完全不同的类型
////匿名结构体类型只能用一次
//int main()
//{
//
//	return 0;
//}
////结构体自引用
////结构体中不能包含一个自己的类型如:1.1
//
//typedef struct Node
//{
//	int date;
////	1.1struct Node n;//error:结构体类型自己里边 不能 包含自己类型的成员变量
//	struct Node *n;//结构体的正确的自引用方式
//}Node;
//int main()
//{
//	struct Node n1;
//	Node n2;//两种写法都没有问题
//	return 0;
//}


//结构体初始化
//struct T
//{
//	double weight;
//	short age;
//};
//struct s
//{
//	char c;
//	struct T st;
//	int a;
//	double d;
//	char arr[20];
//};
//int main()
//{
//	struct s s = {'c',{55.6,30},100,3.14,"hello,bit"};
//	printf("%c,%d,%lf,%s\n",s.c,s.a,s.d,s.arr);//结构体成员的访问
//	printf("%lf\n",s.st.weight);
//	return 0;
//}


//结构体内存对齐
struct s1
{
	char c1;
	int a;
	char c2;
};
struct s2
{
	char c1;
	char c2;
	int a;
};
int main()
{
	struct s1 s1 = {0};
	printf("%d\n",sizeof(s1));
	struct s2 s2 = {0};
	printf("%d\n",sizeof(s2));
	return 0;
}
